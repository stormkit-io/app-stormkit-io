/*
 * Thanks to https://github.com/yannickcr/eslint-plugin-react
 * this repo help us to save time
 */
{
  "extends": [
    "eslint:recommended",
    "plugin:react/recommended"
  ],
  "globals": {
    "require": true,
    "process": true,
    "firebase": true
  },
  "plugins": ["react-hooks", "react", "@typescript-eslint/eslint-plugin"],
  "parser": "@typescript-eslint/parser",
  "rules": {
    "react-hooks/rules-of-hooks": "error",
    "react-hooks/exhaustive-deps": "warn",
    "react/jsx-uses-react": "error",
    "react/jsx-uses-vars": "error",
    "no-unused-vars": "off",
    "max-len": [2, {
      "code": 100,
      "ignoreStrings": true,
      "ignoreTemplateLiterals": true
    }],
    "import/extensions": 0,
    "import/order": 0,
    "import/no-unresolved": 0,
    "import/prefer-default-export": 0,
    "camelcase": 0,
    "func-call-spacing": 0,
    "indent": 0,
    "consistent-return": 0,
    "newline-after-var": [2, "always"],
    "no-trailing-spaces": [2, {
      "skipBlankLines": true
    }],
    "padding-line-between-statements": [
      2,
      {
        "blankLine": "always",
        "prev": "*",
        "next": "return"
      },
      {
        "blankLine": "always",
        "prev": "*",
        "next": "for"
      },
      {
        "blankLine": "always",
        "prev": "*",
        "next": "function"
      },
      {
        "blankLine": "always",
        "prev": "*",
        "next": "expression"
      },
      {
        "blankLine": "always",
        "prev": "*",
        "next": "if"
      },
      {
        "blankLine": "always",
        "prev": "import",
        "next": "*"
      },
      {
        "blankLine": "never",
        "prev": "import",
        "next": "import"
      },
      {
        "blankLine": "always",
        "prev": "*",
        "next": "class"
      },
      {
        "blankLine": "always",
        "prev": "*",
        "next": "switch"
      },
      {
        "blankLine": "always",
        "prev": "*",
        "next": "while"
      },
      {
        "blankLine": "always",
        "prev": "*",
        "next": "throw"
      },
      {
        "blankLine": "always",
        "prev": "try",
        "next": "*"
      },
      {
        "blankLine": "always",
        "prev": "try",
        "next": "*"
      },
      {
        "blankLine": "always",
        "prev": "directive",
        "next": "*"
      },
      {
        "blankLine": "any",
        "prev": "directive",
        "next": "directive"
      },
      {
        "blankLine": "any",
        "prev": "expression",
        "next": "expression"
      },
      {
        "blankLine": "always",
        "prev": "*",
        "next": "export"
      },
      {
        "blankLine": "always",
        "prev": ["const", "let", "var"],
        "next": "*"
      },
      {
        "blankLine": "any",
        "prev": ["const", "let", "var"],
        "next": ["const", "let", "var"]
      }
    ]
  },
  "settings": {
    "react": {
      "createClass": "createReactClass",
      "pragma": "React",
      "fragment": "React.Fragment",
      "version": "detect",
      "flowVersion": "0.53"
    },
    "propWrapperFunctions": [
      "forbidExtraProps",
      {
        "property": "freeze",
        "object": "Object"
      },
      {
        "property": "myFavoriteWrapper"
      }
    ],
    "linkComponents": [
      "Hyperlink",
      {
        "name": "Link",
        "linkAttribute": "to"
      }
    ]
  },
  "parserOptions": {
    "ecmaFeatures": {
      "jsx": true
    }
  }
}